
-- Data Cleaning ---
-- Check for nulls or Duplicates in Primary Key --
USE Datawarehouse;

SELECT cst_id, COUNT(*)
FROM bronze.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id is NULL;

-- When we remove duplicates, always check the timestamp(when was the data last updated)--
WITH CTE1 AS (
SELECT * ,
	ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
	FROM
bronze.crm_cust_info
)
SELECT * FROM CTE1
	WHERE flag_last = 1 and cst_id = 29466;

--method 2:--
SELECT * 
FROM ( SELECT *, 
	ROW_NUMBER() OVER(PARTITION BY cst_id ORDER BY cst_create_date DESC) AS flag_last
	FROM bronze.crm_cust_info
WHERE cst_id IS NOT NULL
) t WHERE flag_last = 1;

-- check for unwanted spaces --

-- Data Standarization & Consistency --

SELECT DISTINCT cst_gndr
FROM silver.crm_cust_info;

-- validation: check for duplicates or Null --
SELECT cst_id, 
	COUNT(*)
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- Check for unwanted spaces --
SELECT cst_lastname
FROM silver.crm_cust_info
WHERE cst_lastname != TRIM(cst_lastname);

SELECT * FROM silver.crm_cust_info;

------------------Cleaning crm_prd_info-------------------------------

SELECT prd_id, 
	COUNT(*)
FROM silver.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1 OR prd_id IS NULL;

-- check for nulls or negative numbers --

SELECT prd_cost
FROM bronze.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL;

-- check for invalid Date Orders --
SELECT *
FROM bronze.crm_prd_info
WHERE prd_end_dt < prd_start_dt;


--- Cleaning Dates --
SELECT 
	prd_id,
	prd_key,
	prd_name,
	prd_start_dt,
	prd_end_dt,
	LEAD(prd_start_dt) OVER(PARTITION BY prd_key ORDER BY prd_start_dt)-1 AS prd_end_dt
	FROM bronze.crm_prd_info;

SELECT * FROM
silver.crm_prd_info;

-- Clean and Load crm_sales_details --
SELECT sls_ord_num,
	sls_prd_key,
	sls_cust_id,
	sls_order_dt,
	sls_ship_dt,
	sls_due_dt,
	sls_sales,
	sls_quantity,
	sls_price
FROM bronze.crm_sales_details
WHERE sls_prd_key NOT IN (SELECT prd_key FROM silver.crm_prd_info);

-- Check for Invalid Dates --
SELECT NULLIF(sls_order_dt,0) AS sls_order_dt
FROM bronze.crm_sales_details
WHERE sls_order_dt <= 0 OR LEN(sls_order_dt) != 8;

SELECT * FROM
bronze.crm_sales_details
WHERE sls_order_dt > sls_ship_dt OR
	sls_order_dt >sls_due_dt;

-- Check Data Consistency between sales, quantity and price --

SELECT
	sls_sales
	sls_quantity,
	sls_price 
FROM bronze.crm_sales_details
WHERE sls_sales ! = sls_quantity * sls_price
OR sls_sales is NULL OR sls_quantity is NULL OR sls_price IS NULL
OR sls_sales <=0 OR sls_quantity <=0 OR sls_price <=0
ORDER BY sls_sales, sls_quantity, sls_price;
-------------------------------------------------------------------------------
SELECT DISTINCT
sls_sales,
sls_quantity,
sls_price
FROM silver.crm_sales_details
WHERE sls_sales != sls_quantity * sls_price
OR sls_sales IS NULL OR sls_quantity IS NULL OR sls_price IS NULL
OR sls_sales <=0 OR sls_quantity <=0 OR sls_price <=0
ORDER BY sls_price, sls_quantity, sls_sales;

-- cleaning erp_cust_az12 -- (check for unmatching data)

SELECT cid,
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4 ,LEN(cid))
	ELSE cid
END AS cid,
	bdate,
	gen	
FROM bronze.erp_cust_az12
WHERE CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4 ,LEN(cid))
	ELSE cid
END NOT IN (SELECT DISTINCT cst_key FROM silver.crm_cust_info)

-- Date Validation Out of Range Dates (check bdates for future)--

SELECT DISTINCT	bdate
FROM bronze.erp_cust_az12
WHERE bdate < '1924-01-01' or  bdate > GETDATE()

SELECT 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4 ,LEN(cid))
	ELSE cid
END AS cid,
CASE WHEN bdate > GETDATE() THEN NULL
	ELSE bdate
END AS bdate,
	gen
FROM bronze.erp_cust_az12;

-- Data Standarization & Consistency --

SELECT DISTINCT gen
FROM bronze.erp_cust_az12;

SELECT 
CASE WHEN cid LIKE 'NAS%' THEN SUBSTRING(cid, 4 ,LEN(cid))
	ELSE cid
END AS cid,
CASE WHEN bdate > GETDATE() THEN NULL
	ELSE bdate
END AS bdate,
CASE WHEN UPPER(TRIM(gen)) IN ('F', 'Female') THEN 'Female'
	WHEN UPPER(TRIM(gen)) IN ('M', 'Male') THEN 'Male'
	ELSE 'n/a'
END AS gen
FROM bronze.erp_cust_az12;

-- cleaning erp_loc_101 -- checking for matching values

SELECT 
REPLACE(cid, '-', '') cid,
cntry
FROM bronze.erp_loc_a101 
WHERE REPLACE(cid, '-', '') NOT IN
	(SELECT cst_key FROM silver.crm_cust_info);

-- Data Standarization & consistency --
SELECT DISTINCT cntry
FROM bronze.erp_loc_a101
ORDER BY cntry;

--cleaning cntry--
SELECT 
REPLACE(cid, '-', '') cid,
CASE WHEN TRIM(cntry) = 'DE' THEN 'Germany'
	WHEN TRIM(cntry) IN ('US','USA') THEN 'United States'
	WHEN TRIM(cntry) = '' OR cntry IS NULL THEN 'n/a'
	ELSE TRIM(cntry)
END AS cntry
FROM bronze.erp_loc_a101;

-- Cleanin erp_px_cat_g1v2 --
--No cleaning needed --
SELECT * FROM bronze.erp_px_cat_g1v2;

-- Check for unwanted spaces --
SELECT * from bronze.erp_px_cat_g1v2
	WHERE cat != TRIM(cat) OR subcat != (subcat) OR maintenance != TRIM(main

